package com.terpTrails.Terp.Trails.service;

import com.terpTrails.Terp.Trails.Entity.FirmRegistration;
import com.terpTrails.Terp.Trails.Entity.VolunteerRegistration;
import com.terpTrails.Terp.Trails.Repository.FirmRepository;
import com.terpTrails.Terp.Trails.Repository.VolunteerRepository;
import com.terpTrails.Terp.Trails.dto.FirmRegisterRequest;
import com.terpTrails.Terp.Trails.dto.LoginRequest;
import com.terpTrails.Terp.Trails.dto.VolunteerRegisterRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.UUID;

@Service
public class AuthService {

    @Autowired
    private VolunteerRepository volunteerRepository;

    @Autowired
    private FirmRepository firmRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // Volunteer registration
    public ResponseEntity<?> registerVolunteer(VolunteerRegisterRequest request) {
        if (volunteerRepository.existsByUsername(request.getUsername())
                || volunteerRepository.existsByEmail(request.getEmail())) {
            return ResponseEntity.badRequest().body("Volunteer with given username or email already exists.");
        }
        VolunteerRegistration volunteer = new VolunteerRegistration();
        volunteer.setFirstName(request.getFirstName());
        volunteer.setLastName(request.getLastName());
        volunteer.setGender(request.getGender());
        volunteer.setDepartmentName(request.getDepartmentName());
        volunteer.setDateOfBirth(request.getDateOfBirth());
        volunteer.setWeight(request.getWeight());
        volunteer.setHeight(request.getHeight());
        //volunteer.setInterests(request.getInterests()); // Ensure Volunteer entity supports a List<String> (e.g., via @ElementCollection)
        //volunteer.setUsername(request.getUsername());
        volunteer.setEmail(request.getEmail());

        // Store the password securely by hashing it before saving
        volunteer.setPassword(passwordEncoder.encode(request.getPassword()));


        // Persist the new volunteer record
        VolunteerRegistration savedVolunteer = volunteerRepository.save(volunteer);
        System.out.println("Saved volunteer: " + savedVolunteer.getId());


        return ResponseEntity.ok("Volunteer registered successfully!");

    }

    public ResponseEntity<?> registerResearchFirm(FirmRegisterRequest request) {
        // Check if a research firm with the same email already exists
        if (firmRepository.existsByEmail(request.getEmail())) {
            return ResponseEntity.badRequest()
                    .body("Research firm with given email already exists.");
        }
        // Validate that the password and confirmPassword match
        if (!request.getPassword().equals(request.getConfirmPassword())) {
            return ResponseEntity.badRequest().body("Password and confirm password do not match.");
        }
        // Map fields from the request to a new ResearchFirm entity
        FirmRegistration firm = new FirmRegistration();
        // Optionally, generate a firmId if not auto-generated by MongoDB
        firm.setFirmName(request.getFirmName());
        //firm.setIrbCertified(request.getIrbCertified());
        firm.setEmail(request.getEmail());
        firm.setPhoneNumber(request.getPhoneNumber());
        firm.setPassword(passwordEncoder.encode(request.getPassword()));

        // Persist the new volunteer record
        FirmRegistration savedFirm = firmRepository.save(firm);
        System.out.println("Saved Firm: " + savedFirm.getId());


        return ResponseEntity.ok("Research firm registered successfully!");
    }

    public ResponseEntity<?> authenticate(LoginRequest loginRequest) {

            // Try to authenticate as a volunteer using the username
            Optional<VolunteerRegistration> volunteerOpt = volunteerRepository.findByEmail(loginRequest.getEmail());
            if (volunteerOpt.isPresent()) {
                VolunteerRegistration volunteer = volunteerOpt.get();
                if (passwordEncoder.matches(loginRequest.getPassword(), volunteer.getPassword())) {
                    // TODO: Generate a JWT token for the volunteer
                    String volunteerId= volunteer.getId();
                    return ResponseEntity.ok("volunteer,"+volunteerId);
                } else {
                    return ResponseEntity.badRequest().body("Invalid credentials for volunteer.");
                }
            }

            // Try to authenticate as a research firm using email (or username if applicable)
            Optional<FirmRegistration> researchFirmOpt = firmRepository.findByEmail(loginRequest.getEmail());
            if (researchFirmOpt.isPresent()) {
                FirmRegistration firm = researchFirmOpt.get();
                if (passwordEncoder.matches(loginRequest.getPassword(), firm.getPassword())) {
                    // TODO: Generate a JWT token for the research firm
                    String firmId= firm.getId();
                    return ResponseEntity.ok("firm,"+firmId);
                } else {
                    return ResponseEntity.badRequest().body("Invalid credentials for research firm.");
                }
            }


        // If not found in either repository, return an error
        return ResponseEntity.badRequest().body("User not found with the provided credentials.");
    }


}
